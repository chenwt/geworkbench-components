package interactions;

import org.geworkbench.engine.management.Subscribe;
import org.geworkbench.engine.management.Publish;
import org.geworkbench.engine.config.VisualPlugin;
import org.geworkbench.bison.datastructure.biocollections.microarrays.DSMicroarraySet;
import org.geworkbench.bison.datastructure.biocollections.DSDataSet;
import org.geworkbench.bison.datastructure.bioobjects.markers.CSGeneMarker;
import org.geworkbench.bison.datastructure.bioobjects.markers.DSGeneMarker;
import org.geworkbench.bison.datastructure.bioobjects.markers.annotationparser.AnnotationParser;
import org.geworkbench.bison.datastructure.complex.panels.DSItemList;
import org.geworkbench.bison.datastructure.complex.panels.CSItemList;
import org.geworkbench.bison.datastructure.complex.panels.DSPanel;
import org.geworkbench.util.pathwaydecoder.mutualinformation.AdjacencyMatrix;
import org.geworkbench.util.pathwaydecoder.mutualinformation.AdjacencyMatrixDataSet;
import org.geworkbench.util.visualproperties.PanelVisualPropertiesManager;
import org.geworkbench.util.visualproperties.PanelVisualProperties;
import org.geworkbench.events.ProjectNodeAddedEvent;
import org.geworkbench.events.AdjacencyMatrixEvent;
import org.geworkbench.events.GeneSelectorEvent;
import org.geworkbench.events.ProjectEvent;
import org.apache.axis.EngineConfiguration;
import org.apache.axis.configuration.BasicClientConfig;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.Range;
import org.jfree.ui.RectangleInsets;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.xml.rpc.ServiceException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;
import java.awt.*;
import java.util.*;
import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.text.DecimalFormat;

/**
 * @author manjunath at genomecenter dot columbia dot edu,  xiaoqing zhang
 */
//@AcceptTypes({DSMicroarraySet.class})
public class CellularNetworkKnowledgeWidget extends javax.swing.JScrollPane implements VisualPlugin {

    /**
     * Creates new form Interactions
     */
    public CellularNetworkKnowledgeWidget() {
        initComponents();
        initConnections();
        ppInteractions.setSelected(true);
        ppInteractions.setToolTipText("Include Protein-Protein Interactions");
        pdInteractions.setSelected(true);
        pdInteractions.setEnabled(true);
        pdInteractions.setToolTipText("Include Protein-DNA Interactions");
        //  activatedMarkerTable.getTableHeader().setDefaultRenderer(activeMarkersTableModel);
        activatedMarkerTable.getTableHeader().setEnabled(true);
        // setting the size of the table and its columns
        activatedMarkerTable.setPreferredScrollableViewportSize(new Dimension(230, 100));
        activatedMarkerTable.getColumnModel().getColumn(0).setPreferredWidth(200);
        activatedMarkerTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        activatedMarkerTable.getColumnModel().getColumn(2).setPreferredWidth(30);


        detailTable.getTableHeader().setDefaultRenderer(tableRenderer);
        detailTable.getTableHeader().setEnabled(true);
        detailTable.getTableHeader().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int col = detailTable.getTableHeader().columnAtPoint(e.getPoint());
                if (col == 0) {
                    ppInteractions.setSelected(!ppInteractions.isSelected());
                } else if (col == 1) {
                    pdInteractions.setSelected(!pdInteractions.isSelected());
                }
                detailTable.getTableHeader().repaint();
            }
        });
    }

    public Component getComponent() {
        return this;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        JPanel topPanel = new JPanel();
        throttlePanel = new JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allGeneList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedGenesList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        detailTable = new javax.swing.JTable();
        activatedMarkerTable = new JTable();
        jLabel1 = new javax.swing.JLabel();
        createNetWorkButton = new javax.swing.JButton();
        topPane = new JSplitPane();
        upPanel = new JSplitPane();
        activatedMarkerTable = new JTable();
        commandToolBar = new JToolBar();
        graphToolBar = new JToolBar();
        thresholdLabel = new JLabel("Threshold");
        thresholdTextField = new JTextField(".50");
        thresholdSlider = new JSlider();
        thresholdSlider.setValue(0);
        thresholdSlider.setMinimum(0);
        thresholdSlider.setMaximum(100);
        thresholdSlider.setSnapToTicks(true);
        thresholdSlider.setPaintTicks(true);
        thresholdSlider.setMinorTickSpacing(1);
        thresholdSlider.setMajorTickSpacing(5);
        thresholdSlider.setCursor(java.awt.Cursor.getPredefinedCursor(java.
                awt.Cursor.HAND_CURSOR));
        thresholdSlider.addChangeListener(new javax.swing.event.
                ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                     thresholdSlider_stateChanged(e);
            }
        });
        thresholdSlider.setToolTipText(
                "Move the slider to change the threshold of interactions");


        graphToolBar.add(thresholdLabel);
        graphToolBar.add(thresholdTextField);
        graphToolBar.add(thresholdSlider);
        cancelButton = new JButton();
        allProteinCheckbox = new JCheckBox("All Protein-Protein");
        allProteinDNACheckbox = new JCheckBox("All Protein-DNA");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(204, 204, 255)));
        //   jPanel2.setMaximumSize(new Dimension(200, 80));
        jPanel2.setMinimumSize(new Dimension(200, 80));
        jPanel2.setPreferredSize(new Dimension(200, 80));
        jLabel2.setText("Obtain Interactions for Gene(s):");

        allGeneList.setToolTipText("Available Genes");
        allGeneList.setModel(allGeneModel);
        allGeneList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                allGeneListHandler(evt);
            }
        });

        jScrollPane1.setViewportView(allGeneList);

        selectedGenesList.setToolTipText("Selected Genes");
        selectedGenesList.setModel(selectedGenesModel);
        selectedGenesList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                selectedGenesListHandler(evt);
            }
        });

        jScrollPane2.setViewportView(selectedGenesList);

        addButton.setText(">>");
        addButton.setToolTipText("Add to selection");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonHandler(evt);
            }
        });

        removeButton.setText("<<");
        removeButton.setToolTipText("Remove From Selection");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonHandler(evt);
            }
        });

        refreshButton.setText("Preview Selections...");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewSelectionsHandler(evt);
            }
        });

        //  org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
//        jPanel2.setLayout(jPanel2Layout);
//        jPanel2Layout.setHorizontalGroup(
//                jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                        .add(jPanel2Layout.createSequentialGroup()
//                        .addContainerGap()
//                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                        .add(jPanel2Layout.createSequentialGroup()
//                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                                        .add(jPanel2Layout.createSequentialGroup()
//                                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 193, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
//                                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 75, Short.MAX_VALUE)
//                                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                                                        .add(addButton)
//                                                        .add(removeButton))
//                                                .add(54, 54, 54)
//                                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 194, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
//                                        .add(jLabel2))
//                                .addContainerGap())
//                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
//                      //  .add(refreshButton)
//                        .add(217, 217, 217))))
//        );
//        jPanel2Layout.setVerticalGroup(
//                jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                        .add(jPanel2Layout.createSequentialGroup()
//                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                                .add(jPanel2Layout.createSequentialGroup()
//                                        .add(56, 56, 56)
//                                        .add(addButton)
//                                        .add(33, 33, 33)
//                                        .add(removeButton))
//                                .add(jPanel2Layout.createSequentialGroup()
//                                .addContainerGap()
//                                .add(jLabel2)
//                                .add(14, 14, 14)
//                                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
//                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
//                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
//                     //   .add(refreshButton)
//                        .add(20, 20, 20))
//        );

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new Color(204, 204, 255)));
        //jPanel1.setMaximumSize(new Dimension(587, 382));
        jPanel1.setMinimumSize(new Dimension(300, 50));
        jPanel1.setPreferredSize(new Dimension(587, 182));
        detailTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String []{
                        "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));

        detailTable.setModel(previewTableModel);
        detailTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    JTable target = (JTable) e.getSource();
                    int row = target.getSelectedRow();
                    int column = target.getSelectedColumn();
                    if (row < hits.size()) {
                        CellularNetWorkElementInformation marker = hits.get(row);
                        hits.remove(row);
                        allGenes.add(marker.getdSGeneMarker());
                        activatedMarkerTable.revalidate();
                        detailTable.revalidate();
                    }
                }
            }
        });
        activatedMarkerTable.setModel(activeMarkersTableModel);
        activatedMarkerTable.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    JTable target = (JTable) e.getSource();
                    int row = target.getSelectedRow();
                    int column = target.getSelectedColumn();
                    if (row < allGenes.size()) {
                        DSGeneMarker marker = allGenes.get(row);
                        hits.addElement(new CellularNetWorkElementInformation(marker));
                        allGenes.remove(row);
                        activatedMarkerTable.revalidate();
                        detailTable.revalidate();
                    }
                }
            }
        });

        jScrollPane3.setViewportView(detailTable);
        jScrollPane4.setViewportView(activatedMarkerTable);
        jLabel1.setText("Preview:");

        createNetWorkButton.setText("Create Network");
        createNetWorkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadfromDBHandler(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(new BorderLayout());
        jPanel1.add(jLabel1, BorderLayout.NORTH);
        jPanel1.add(jScrollPane3, BorderLayout.CENTER);

        jPanel1.add(commandToolBar, BorderLayout.SOUTH);

//        jPanel1.setLayout(jPanel1Layout);
//        jPanel1Layout.setHorizontalGroup(
//                jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                        .add(jPanel1Layout.createSequentialGroup()
//                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                                .add(jPanel1Layout.createSequentialGroup()
//                                        .addContainerGap()
//                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 560, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
//                                        .add(jLabel1)))
//                                .add(jPanel1Layout.createSequentialGroup()
//                                .add(242, 242, 242) ))
//                               // .add(createNetWorkButton)))
//                        .addContainerGap(15, Short.MAX_VALUE))
//        );
//        jPanel1Layout.setVerticalGroup(
//                jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                        .add(jPanel1Layout.createSequentialGroup()
//                        .addContainerGap()
//                        .add(jLabel1)
//                        .add(21, 21, 21)
//                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 277, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
//                        .add(15, 15, 15)
//                     //   .add(createNetWorkButton)
//                        .addContainerGap(19, Short.MAX_VALUE))
//        );

        this.getViewport().add(upPanel);
        upPanel.setOrientation(JSplitPane.VERTICAL_SPLIT);
        activeMarkersLabel = new JLabel("Activated Marker List");
        jPanel2.setLayout(new BorderLayout());
        jPanel2.add(activeMarkersLabel, BorderLayout.NORTH);
        jPanel2.add(jScrollPane4, BorderLayout.CENTER);
        topPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
        topPane.add(jPanel2, JSplitPane.LEFT);
        topPane.add(throttlePanel, JSplitPane.RIGHT);
        chart = ChartFactory.createXYLineChart("Throttle Graph", "likelihood", "# interactions", null,
                PlotOrientation.VERTICAL, true,
                true, true); // Title,  X-Axis label,  Y-Axis label,  Dataset,  Show legend, show ToolTips

        graph = new ChartPanel(chart, true);
        XYPlot newPlot = (XYPlot) chart.getPlot();
        // change the auto tick unit selection to integer units only...
        NumberAxis rangeAxis = (NumberAxis) newPlot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        throttlePanel.setLayout(new BorderLayout());
        throttlePanel.add(graph, BorderLayout.CENTER);
        upPanel.add(topPane, JSplitPane.TOP);
        upPanel.add(jPanel1, JSplitPane.BOTTOM);
//         mainPanel.add(jPanel1, BorderLayout.CENTER);
        throttlePanel.add(graphToolBar, BorderLayout.SOUTH);
        commandToolBar.add(allProteinCheckbox);
        commandToolBar.add(allProteinDNACheckbox);
        //commandToolbar.add(  );
        commandToolBar.add(refreshButton);
        commandToolBar.add(createNetWorkButton);
        cancelButton.setText("Cancel");
        commandToolBar.add(cancelButton);
        hits = new Vector<CellularNetWorkElementInformation>();
        //hits.add(new CellularNetWorkElementInformation(12, 23, true, true, new CSGeneMarker("test"), "goterm", "P"));

//        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(mainPanel);
//        mainPanel.setLayout(layout);
//        layout.setHorizontalGroup(
//                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                        .add(layout.createSequentialGroup()
//                        .addContainerGap()
//                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
//                                .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                                .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
//                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
//        );
//        layout.setVerticalGroup(
//                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
//                        .add(layout.createSequentialGroup()
//                        .addContainerGap()
//                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, Short.MAX_VALUE)
//                        .add(15, 15, 15)
//                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
//        );
    }// </editor-fold>//GEN-END:initComponents

    public XYSeriesCollection createCollection(double min, double max,
                                               int selectedId, boolean active) {
        PanelVisualPropertiesManager propertiesManager =
                PanelVisualPropertiesManager.getInstance();
        int binSize = CellularNetWorkElementInformation.getBinNumber();
        XYSeriesCollection plots = new XYSeriesCollection();
        try {
           XYSeries dataSeries = new XYSeries("Total Distribution");
           XYSeries ppDataSeries = new XYSeries("Protein-Protein");
            XYSeries pdDataSeries = new XYSeries("Protein-DNA");
            int[] basketValues = new int[binSize];
            int[] pdBasketValues = new int[binSize];
            int[] ppBasketValues = new int[binSize];
            for (int i = 0; i < binSize; i++) {
                basketValues[i] = 0;
            }
            if (hits != null) {
                for (CellularNetWorkElementInformation cellularNetWorkElementInformation : hits) {
                    int[] distributionArray = cellularNetWorkElementInformation.getDistribution();
                    int[] pdDistributionArray = cellularNetWorkElementInformation.getPdDistribution();
                    int[] ppDistributionArray = cellularNetWorkElementInformation.getPpDistribution();

                    for (int i = 0; i < binSize; i++) {
                        basketValues[i] += distributionArray[i];
                        pdBasketValues[i] += pdDistributionArray[i];
                        ppBasketValues[i] += ppDistributionArray[i];
                    }

                }
            }

            if (basketValues == null) {
                return null;
            }
            for (int i = 0; i < binSize; i++) {
                dataSeries.add(i * CellularNetWorkElementInformation.getSmallestIncrement(), basketValues[i]);
                pdDataSeries.add(i * CellularNetWorkElementInformation.getSmallestIncrement(), pdBasketValues[i]) ;
                ppDataSeries.add(i * CellularNetWorkElementInformation.getSmallestIncrement(), ppBasketValues[i]);
            }

            plots.addSeries(dataSeries);
            plots.addSeries(pdDataSeries);
            plots.addSeries(ppDataSeries);


        } catch (IndexOutOfBoundsException e) {
            return null;
        }
        return plots;
    }

    public void drawPlot(final XYSeriesCollection plots, String title) {
        if (plots == null) {
            return;
        }
        boolean isToolTipEnabled = true;

        chart = ChartFactory.createXYLineChart(title, "likelihood", "# interactions", plots,
                PlotOrientation.VERTICAL, true,
                true, true);
        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        XYPlot newPlot = (XYPlot) chart.getPlot();
        Color c = UIManager.getColor("Panel.background");
        if (c != null) {
            newPlot.setBackgroundPaint(c);
        } else {
            c = Color.white;
        }
        newPlot.setBackgroundPaint(c);
        newPlot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
        newPlot.setDomainGridlinePaint(Color.white);
        newPlot.setRangeGridlinePaint(Color.white);
        newPlot.setDomainCrosshairVisible(true);
        newPlot.setDomainCrosshairLockedOnData(true);
        //Set up fixed ranges.
        //        ValueAxis xaxis = new NumberAxis();
        //        xaxis.setRange(minValue, maxValue);
        //        newPlot.setRangeAxis(xaxis);
        XYLineAndShapeRenderer renderer = (XYLineAndShapeRenderer) newPlot.
                getRenderer();
        renderer.setShapesVisible(true);
        renderer.setShapesFilled(true);
        if (isToolTipEnabled) {

            renderer.setToolTipGenerator(new XYToolTipGenerator() {


                public String generateToolTip(XYDataset dataset, int series,
                                              int item) {
                    String resultStr = "";
                    Object[] result = new Object[3];
                    String label = (String) (plots.getSeries(series).getKey());
                    double x = dataset.getXValue(series, item);
                    if (Double.isNaN(x) && dataset.getX(series, item) == null) {
                        return resultStr;
                    }

                    double y = dataset.getYValue(series, item);
                    if (Double.isNaN(y) && dataset.getX(series, item) == null) {
                        return resultStr;
                    }
                    String xStr = myFormatter.format(x);

                    return resultStr = label + ": ([" + xStr + ", " +
                            myFormatter.format(x + 0.01) + "), " +
                            (int) y + ")";
                }
            });
        }
        renderer.setSeriesLinesVisible(0, true);
        for (int i = 1; i < newPlot.getDatasetCount(); i++) {
            renderer.setSeriesLinesVisible(i, true);
        }

        //base color & shape
        // renderer.setSeriesPaint(0, baseColor);
        //        renderer.setSeriesShape(0, baseShape);


        newPlot.setRenderer(renderer);

        // change the auto tick unit selection to integer units only...
        NumberAxis rangeAxis = (NumberAxis) newPlot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        ValueAxis xAxis = newPlot.getDomainAxis();

        //     xAxis.setAutoRange(false);
        //       xAxis.setRange(dateRange);

        xAxis.setRange(0, 1);
        // OPTIONAL CUSTOMISATION COMPLETED.
        graph.setChart(chart);


    }
    void thresholdSlider_stateChanged(ChangeEvent e) {
           int value = thresholdSlider.getValue();
           double maxValue = thresholdSlider.getMaximum();
           XYPlot plot = this.chart.getXYPlot();
           ValueAxis domainAxis = plot.getDomainAxis();
           Range range = domainAxis.getRange();
           //        double c = domainAxis.getLowerBound()
           //                   + (value / maxValue) * range.getLength();
        System.out.print(value);
           double lowValue =   (double)value /( CellularNetWorkElementInformation.getBinNumber() - 1);
            System.out.println(value + " " + lowValue);
           plot.setDomainCrosshairValue(lowValue);
           String s = myFormatter.format(lowValue);
           thresholdTextField.setText(s);

            for (CellularNetWorkElementInformation cellularNetWorkElementInformation : hits) {
                  cellularNetWorkElementInformation.setThreshold(lowValue);
                System.out.println("PP: " +cellularNetWorkElementInformation.getPpInteractionNum() );
            }
        previewTableModel.fireTableDataChanged();
        detailTable.revalidate();
       }

    private void loadfromDBHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadfromDBHandler
        int[] rows = detailTable.getSelectedRows();
        if (rows != null && rows.length > 0) {
            AdjacencyMatrix matrix = new AdjacencyMatrix();
            AdjacencyMatrixDataSet dataSet = null;
            for (int row : rows) {
                Vector<Object> data = cachedPreviewData.get(row);
                BigDecimal entrezId = (BigDecimal) data.get(1);
                try {
                    Vector<Integer> ppiIndices = new Vector<Integer>();
                    Vector<Integer> pdiIndices = new Vector<Integer>();
                    Vector<Object> neighbors = new Vector<Object>();
                    int i = 0;
                    if (ppInteractions.isSelected()) {
                        Object[] ppi = interactionsService.getFIRSTNEIGHBORS(entrezId, "protein-protein");
                        neighbors.addAll(Arrays.asList(ppi));
                        for (int j = 0; j < ppi.length; j++)
                            ppiIndices.add(i++);
                    }
                    if (pdInteractions.isSelected()) {
                        Object[] pdi = interactionsService.getFIRSTNEIGHBORS(entrezId, "protein-dna");
                        neighbors.addAll(Arrays.asList(pdi));
                        for (int j = 0; j < pdi.length; j++)
                            pdiIndices.add(i++);
                    }
                    matrix.setMicroarraySet((DSMicroarraySet) dataset);
                    int eid = entrezId.intValue();
                    CSGeneMarker marker = new CSGeneMarker();
                    marker.setGeneId(eid);
                    DSItemList<DSGeneMarker> markers = dataset.getMarkers();
                    DSItemList<DSGeneMarker> copy = new CSItemList<DSGeneMarker>();
                    copy.addAll(markers);
                    CellularNetworkKnowledgeWidget.EntrezIdComparator eidc = new CellularNetworkKnowledgeWidget.EntrezIdComparator();
                    Collections.sort(copy, eidc);
                    int index = Collections.binarySearch(copy, marker, eidc);
                    int serial = copy.get(index).getSerial();
                    matrix.addGeneRow(serial);
                    i = 0;
                    for (Object neighbor : neighbors) {
                        marker = new CSGeneMarker();
                        marker.setGeneId(((BigDecimal) neighbor).intValue());
                        index = Collections.binarySearch(copy, marker, eidc);
                        if (index >= 0 && index < markers.size()) {
                            int serial2 = copy.get(index).getSerial();
                            matrix.add(serial, serial2, 0.8f);
                            if (ppiIndices.contains(i)) {
                                matrix.addDirectional(serial, serial2, "pp");
                                matrix.addDirectional(serial2, serial, "pp");
                            }
                            if (pdiIndices.contains(i)) {
                                matrix.addDirectional(serial, serial2, "pd");
                                matrix.addDirectional(serial2, serial, "pd");
                            }
                        }
                        i++;
                    }
                    dataSet = new AdjacencyMatrixDataSet(matrix, serial, 0.5f, 2, "Adjacency Matrix", dataset.getLabel(), dataset);
                } catch (RemoteException re) {
                    JOptionPane.showMessageDialog(this, "Exception from server: " + System.getProperty("interactions.endpoint"), "Connect Exception", JOptionPane.ERROR_MESSAGE);
                }
            }
            if (dataSet != null) {
                publishProjectNodeAddedEvent(new ProjectNodeAddedEvent("Adjacency Matrix Added", null, dataSet));
                publishAdjacencyMatrixEvent(new AdjacencyMatrixEvent(matrix, "Interactions from knowledgebase", -1, 2, 0.5f, AdjacencyMatrixEvent.Action.DRAW_NETWORK));
            }
        }
    }//GEN-LAST:event_loadfromDBHandler

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton addButton;
    private JButton cancelButton;
    private JList allGeneList;
    private JButton refreshButton;
    private JButton createNetWorkButton;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JPanel mainPanel;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel throttlePanel;
    private JFreeChart chart;
    private ChartPanel graph;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JScrollPane jScrollPane4;
    private JTable detailTable;
    private JButton removeButton;
    private JList selectedGenesList;
    private JSplitPane topPane = new JSplitPane();
    private JSplitPane upPanel = new JSplitPane();
    private JTable activatedMarkerTable;

    private JToolBar commandToolBar;
    private JToolBar graphToolBar;
    private JLabel thresholdLabel;
    private JLabel activeMarkersLabel;
    private JTextField thresholdTextField;
    private JSlider thresholdSlider;
    private JCheckBox allProteinCheckbox;
    private JCheckBox allProteinDNACheckbox;
    private DecimalFormat myFormatter = new DecimalFormat("0.00");
    // End of variables declaration//GEN-END:variables

    private JCheckBox ppInteractions = new JCheckBox("Include  Protein-Protein Interactions");
    private JCheckBox pdInteractions = new JCheckBox("Include Protein-DNA Interactions");

    private void allGeneListHandler(MouseEvent evt) {
        if (evt.getClickCount() == 2) {
            int index = allGeneList.locationToIndex(evt.getPoint());
            DSGeneMarker m = allGenes.get(index);
            selectedGenes.add(m);
            allGenes.remove(m);
            allGeneList.setModel(new DefaultListModel());
            allGeneList.setModel(allGeneModel);
            selectedGenesList.setModel(new DefaultListModel());
            selectedGenesList.setModel(selectedGenesModel);
        }
    }

    private void selectedGenesListHandler(MouseEvent evt) {
        if (evt.getClickCount() == 2) {
            int index = selectedGenesList.locationToIndex(evt.getPoint());
            if (index >= 0) {
                DSGeneMarker m = selectedGenes.get(index);
                allGenes.add(m);
                selectedGenes.remove(m);
                allGeneList.setModel(new DefaultListModel());
                allGeneList.setModel(allGeneModel);
                selectedGenesList.setModel(new DefaultListModel());
                selectedGenesList.setModel(selectedGenesModel);
            }
        }
    }

    private void addButtonHandler(ActionEvent e) {
        int[] indices = allGeneList.getSelectedIndices();
        if (indices != null && indices.length > 0) {
            Vector<DSGeneMarker> markers = new Vector<DSGeneMarker>();
            for (int index : indices) {
                DSGeneMarker marker = allGenes.get(index);
                selectedGenes.add(marker);
                markers.add(marker);
            }
            for (DSGeneMarker marker : markers) {
                allGenes.remove(marker);
            }
            allGeneList.setModel(new DefaultListModel());
            allGeneList.setModel(allGeneModel);
            selectedGenesList.setModel(new DefaultListModel());
            selectedGenesList.setModel(selectedGenesModel);
        }
    }

    private void removeButtonHandler(ActionEvent e) {
        int[] indices = selectedGenesList.getSelectedIndices();
        if (indices != null && indices.length > 0) {
            Vector<DSGeneMarker> markers = new Vector<DSGeneMarker>();
            for (int index : indices) {
                DSGeneMarker marker = selectedGenes.get(index);
                allGenes.add(marker);
                markers.add(marker);
            }
            for (DSGeneMarker marker : markers) {
                selectedGenes.remove(marker);
            }
            allGeneList.setModel(new DefaultListModel());
            allGeneList.setModel(allGeneModel);
            selectedGenesList.setModel(new DefaultListModel());
            selectedGenesList.setModel(selectedGenesModel);
        }
    }

    private void previewSelectionsHandler(ActionEvent e) {
        entrezIds.clear();
        cachedPreviewData.clear();
        geneNames.clear();
        InteractionsConnectionImpl interactionsConnection = new InteractionsConnectionImpl();

        for (CellularNetWorkElementInformation cellularNetWorkElementInformation : hits) {
            DSGeneMarker marker = cellularNetWorkElementInformation.getdSGeneMarker();
            if (marker != null && marker.getGeneId() != -1) {
                BigDecimal id = new BigDecimal(marker.getGeneId());
                ArrayList<InteractionDetail> interactionDetails = interactionsConnection.getPairWiseInteraction(id);
                cellularNetWorkElementInformation.setInteractionDetails(interactionDetails);
                if (id != null && !entrezIds.contains(id)) {
                    geneNames.add(marker.getGeneName());
                    entrezIds.add(id);
                    cachedPreviewData.add(new Vector<Object>());
                }
            }
        }
        drawPlot(createCollection(0, 1, 1, true), "Throttle Graph");
        throttlePanel.repaint();
        previewTableModel.fireTableDataChanged();
        detailTable.revalidate();
    }

    private void initConnections() {
        EngineConfiguration ec = new BasicClientConfig();
        INTERACTIONSServiceLocator service =
                new INTERACTIONSServiceLocator(ec);
        service.setinteractionsEndpointAddress(System.getProperty("interactions.endpoint"));
        try {
            interactionsService = service.getinteractions();
        } catch (ServiceException se) {
            se.printStackTrace();
        }
    }

    ListModel allGeneModel = new AbstractListModel() {
        public Object getElementAt(int index) {
            return allGenes.get(index);
        }

        public int getSize() {
            return allGenes.size();
        }
    };

    ListModel selectedGenesModel = new AbstractListModel() {
        public Object getElementAt(int index) {
            return selectedGenes.get(index);
        }

        public int getSize() {
            return selectedGenes.size();
        }
    };

    DefaultTableModel activeMarkersTableModel = new DefaultTableModel() {

        public boolean isCellEditable(int r, int c) {
            return false;
        }

        public int getColumnCount() {
            return 3;
        }

        public int getRowCount() {
            if (allGenes != null)
                return allGenes.size();
            return 0;
        }

        public String getColumnName(int index) {
            switch (index) {
                case 0:
                    return "Marker ";
                case 1:
                    return "Gene";
                case 2:
                    return "Type";

                default:
                    return "";
            }
        }

        synchronized public Object getValueAt(int row, int column) {
            Thread.currentThread().setContextClassLoader(CellularNetworkKnowledgeWidget.this.getClass().getClassLoader());
            if (allGenes != null) {

                DSGeneMarker value = (DSGeneMarker) allGenes.get(row);
                if (value != null) {
                    switch (column) {
                        case 0: {


                            return value.toString();

                        }
                        case 1: {
                            if (value.getGeneName() != null) {
                                return value.getGeneName();
                            } else {
                                return AnnotationParser.getGeneName(value.getLabel());

                            }
                        }
                        case 2: {

                            return "P";
                        }
                        case 3: {

                            return cachedPreviewData.get(row).get(3);
                        }
                        default:
                            return "loading ...";
                    }
                }

            }
//            TableWorker worker = new TableWorker(row, column);
//            worker.start();
            return "loading ...";
        }
    };


    DefaultTableModel previewTableModel = new DefaultTableModel() {


        public int getColumnCount() {
            return 8;
        }

        public int getRowCount() {
            if (hits != null)
                return hits.size();
            return 0;
        }

        public String getColumnName(int index) {
            switch (index) {
                case 0:
                    return "Include Protein-DNA";
                case 1:
                    return "Include Protein-Protein";
                case 2:
                    return "Marker";
                case 3:
                    return "Gene";
                case 4:
                    return "Gene Type";

                case 5:
                    return "GO Description";
                case 6:
                    return "# of Protein-Protein Interactions";
                case 7:
                    return "# of Protein-DNA Interactions";
                default:
                    return "";
            }
        }

        /* get the Object data to be displayed at (row, col) in table*/
        public Object getValueAt(int row, int col) {

            CellularNetWorkElementInformation hit = hits.get(row);
            /*display data depending on which column is chosen*/
            switch (col) {
                case 0:
                    return hit.isIncludePDInteraction();
                case 1:
                    return hit.isIncludePPInteraction();
                case 2:
                    return hit.getdSGeneMarker();
                case 3:
                    return hit.getdSGeneMarker();
                case 4:
                    return hit.getGeneType();

                case 5:
                    return hit.getGoInfoStr();
                case 6:
                    return hit.getPdInteractionNum();
                case 7:
                    return hit.getPpInteractionNum();
            }
            return "Loading";
        }

        /*returns the Class type of the column c*/
        public Class getColumnClass(int c) {
            if (getValueAt(0, c) != null) {
                return getValueAt(0, c).getClass();
            }
            return new String().getClass();
        }

        /*returns if the cell is editable; returns false for all cells in columns except column 6*/
        public boolean isCellEditable(int row, int col) {
            //Note that the data/cell address is constant,
            //no matter where the cell appears onscreen.
            if (col > 1) {
                return false;
            } else {
                return true;
            }
        }

        /*detect change in cell at (row, col); set cell to value; update the table */
        public void setValueAt(Object value, int row, int col) {
            CellularNetWorkElementInformation hit = hits.get(row);
            if (col == 0) {
                hit.setIncludePDInteraction(((Boolean) value).booleanValue());
            } else if (col == 1) {
                hit.setIncludePPInteraction(((Boolean) value).booleanValue());
            }
            fireTableCellUpdated(row, col);
        }

//        synchronized public Object getValueAt(int row, int column) {
//            Thread.currentThread().setContextClassLoader(CellularNetworkKnowledgeWidget.this.getClass().getClassLoader());
//            if (interactionsService != null) {
//                try {
//                    Object value = null;
//                    switch (column) {
//                        case 0: {
//                           if (cachedPreviewData.get(row).size() == 0) {
//                                String gn = geneNames.get(row);
//                                cachedPreviewData.get(row).add(0, gn);
//                                return gn;
//                            }
//                            return cachedPreviewData.get(row).get(0);
//                        }
//                        case 1: {
//                            if (cachedPreviewData.get(row).size() <= 1) {
//                                BigDecimal eid = entrezIds.get(row);
//                                cachedPreviewData.get(row).add(1, eid);
//                                return eid;
//                            }
//                            return cachedPreviewData.get(row).get(1);
//                        }
//                        case 2: {
//                            if (cachedPreviewData.get(row).size() <= 2) {
//                                BigDecimal ic = interactionsService.getINTERACTIONCOUNT(entrezIds.get(row), "protein-protein");
//                                cachedPreviewData.get(row).add(2, ic);
//                                return ic;
//                            }
//                            return cachedPreviewData.get(row).get(2);
//                        }
//                        case 3: {
//                            if (cachedPreviewData.get(row).size() <= 3) {
//                                BigDecimal ic = interactionsService.getINTERACTIONCOUNT(entrezIds.get(row), "protein-dna");
//                                cachedPreviewData.get(row).add(3, ic);
//                                return ic;
//                            }
//                            return cachedPreviewData.get(row).get(3);
//                        }
//                        default:
//                            return "loading ...";
//                    }
//                } catch (RemoteException re) {
//                    return "Exception from server: " + System.getProperty("interactions.endpoint");
//                }
//            }
////            TableWorker worker = new TableWorker(row, column);
////            worker.start();
//            return "loading ...";
//        }
    };

    TableCellRenderer tableRenderer = new TableCellRenderer() {
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//            if (row == -1) {
//                if (column == 0) {
//                    return ppInteractions;
//                } else if (column == 1) {
//                    return pdInteractions;
//                }
//            }
//            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            return new JLabel((String) value);
        }
    };

    class TableWorker extends SwingWorker {
        int row = 0;
        int column = 0;

        public TableWorker(int r, int c) {
            row = r;
            column = c;
        }

        synchronized public Object construct() {
            Thread.currentThread().setContextClassLoader(CellularNetworkKnowledgeWidget.this.getClass().getClassLoader());
            if (interactionsService != null) {
                try {
                    Object value = null;
                    switch (column) {
                        case 0:
                            value = entrezIds.get(row);
                            break;
                        case 1:
                            value = interactionsService.getGENECOUNT();
                            break;
                        case 2:
                            value = interactionsService.getGENECOUNT();
                            break;
//                        case 1: value =  interactionsService.getINTERACTIONCOUNT(translatedNames.get(row).toUpperCase(), new BigDecimal(1));
//                        case 2: value = interactionsService.getINTERACTIONCOUNT(translatedNames.get(row).toUpperCase(), new BigDecimal(2));
                        default:
                            value = "loading ...";
                    }
                    cachedPreviewData.get(row).add(column, value);
                    previewTableModel.fireTableDataChanged();
                } catch (RemoteException re) {
                    re.printStackTrace();
                }
            }
            return "loading ...";
        }
    }

    private INTERACTIONS interactionsService = null;

    private Vector<DSGeneMarker> allGenes = new Vector<DSGeneMarker>();
    private Vector<DSGeneMarker> selectedGenes = new Vector<DSGeneMarker>();
    private Vector<BigDecimal> entrezIds = new Vector<BigDecimal>();
    private Vector<String> geneNames = new Vector<String>();
    private Vector<Vector<Object>> cachedPreviewData = new Vector<Vector<Object>>();
    private Vector<CellularNetWorkElementInformation> hits = new Vector<CellularNetWorkElementInformation>();

    private DSMicroarraySet dataset = null;

    @Subscribe
    public void receive(GeneSelectorEvent gse, Object source) {
        DSPanel<DSGeneMarker> panel = gse.getPanel();
        if (panel != null) {
            allGenes.clear();
            for (DSGeneMarker marker : panel) {
                if (!selectedGenes.contains(marker))
                    allGenes.add(marker);
            }
            activeMarkersTableModel.fireTableDataChanged();
            Vector<DSGeneMarker> temp = new Vector<DSGeneMarker>();
            for (DSGeneMarker marker : selectedGenes) {
                if (!panel.contains(marker))
                    temp.add(marker);
            }
            for (DSGeneMarker marker : temp)
                selectedGenes.remove(marker);
            allGeneList.setModel(new DefaultListModel());
            allGeneList.setModel(allGeneModel);
            selectedGenesList.setModel(new DefaultListModel());
            selectedGenesList.setModel(selectedGenesModel);
        }
    }

    @Subscribe
    public void receive(ProjectEvent pe, Object source) {
        DSDataSet ds = pe.getDataSet();
        if (ds != null && ds instanceof DSMicroarraySet) {
            dataset = (DSMicroarraySet) ds;
        }
    }

    @Publish
    public AdjacencyMatrixEvent publishAdjacencyMatrixEvent(AdjacencyMatrixEvent ae) {
        return ae;
    }

    @Publish
    public ProjectNodeAddedEvent publishProjectNodeAddedEvent(ProjectNodeAddedEvent pe) {
        return pe;
    }

    class EntrezIdComparator implements Comparator<DSGeneMarker> {
        public int compare(DSGeneMarker m1, DSGeneMarker m2) {
            return (new Integer(m1.getGeneId())).compareTo(new Integer(m2.getGeneId()));
        }
    }
}
