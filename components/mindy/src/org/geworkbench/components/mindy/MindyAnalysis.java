package org.geworkbench.components.mindy;

import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.geworkbench.analysis.AbstractAnalysis;
import org.geworkbench.bison.datastructure.biocollections.microarrays.CSMicroarraySet;
import org.geworkbench.bison.datastructure.biocollections.microarrays.DSMicroarraySet;
import org.geworkbench.bison.datastructure.biocollections.views.DSMicroarraySetView;
import org.geworkbench.bison.datastructure.bioobjects.markers.CSGeneMarker;
import org.geworkbench.bison.datastructure.bioobjects.markers.DSGeneMarker;
import org.geworkbench.bison.datastructure.bioobjects.microarray.CSExpressionMarkerValue;
import org.geworkbench.bison.datastructure.bioobjects.microarray.CSMicroarray;
import org.geworkbench.bison.datastructure.bioobjects.microarray.DSMarkerValue;
import org.geworkbench.bison.datastructure.bioobjects.microarray.DSMicroarray;
import org.geworkbench.bison.datastructure.complex.panels.DSItemList;
import org.geworkbench.bison.model.analysis.AlgorithmExecutionResults;
import org.geworkbench.bison.model.analysis.ClusteringAnalysis;
import org.geworkbench.builtin.projects.ProjectPanel;
import org.geworkbench.engine.management.Publish;
import org.geworkbench.engine.management.Subscribe;
import org.geworkbench.events.GeneSelectorEvent;
import org.geworkbench.util.pathwaydecoder.mutualinformation.MindyData;
import org.geworkbench.util.pathwaydecoder.mutualinformation.MindyDataSet;

import wb.data.Marker;
import wb.data.MarkerSet;
import wb.data.Microarray;
import wb.data.MicroarraySet;
import edu.columbia.c2b2.mindy.Mindy;
import edu.columbia.c2b2.mindy.MindyResults;

/**
 * @author Matt Hall
 * @author ch2514
 * @version $Id: MindyAnalysis.java,v 1.9 2007-06-28 19:03:46 keshav Exp $
 */
public class MindyAnalysis extends AbstractAnalysis implements
		ClusteringAnalysis {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	Log log = LogFactory.getLog(this.getClass());

	private MindyParamPanel paramPanel;

	public MindyAnalysis() {
		setLabel("MINDY");
		paramPanel = new MindyParamPanel();
		setDefaultPanel(paramPanel);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.geworkbench.analysis.AbstractAnalysis#getAnalysisType()
	 */
	public int getAnalysisType() {
		return AbstractAnalysis.ZERO_TYPE;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see org.geworkbench.bison.model.analysis.Analysis#execute(java.lang.Object)
	 */
	@SuppressWarnings("unchecked")
	public AlgorithmExecutionResults execute(Object input) {
		log.debug("input: " + input);
		// Use this to get params
		MindyParamPanel params = (MindyParamPanel) aspp;
		DSMicroarraySet<DSMicroarray> mSet = ((DSMicroarraySetView) input)
				.getMicroarraySet();

		String paramDesc = "Generated by MINDY run with paramters: \n";
		paramDesc += "Candidate modulators: ";
		ArrayList<Marker> modulators = new ArrayList<Marker>();
		ArrayList<String> modulatorGeneList = params.getModulatorGeneList();
		for (String modGene : modulatorGeneList) {
			DSGeneMarker marker = mSet.getMarkers().get(modGene);
			if (marker == null) {
				log.info("Couldn't find marker " + modGene
						+ " from modulator file in microarray set.");
				JOptionPane
						.showMessageDialog(
								null,
								modGene
										+ " candidate modulator not found in loadad microarray set.");
				return null;
			} else {
				paramDesc += modGene + " ";
				modulators.add(new Marker(modGene));
			}
		}
		paramDesc += "\n";

		paramDesc += "DPI Annotated Genes: ";
		ArrayList<Marker> dpiAnnots = new ArrayList<Marker>();
		ArrayList<String> dpiAnnotList = params.getDPIAnnotatedGeneList();
		for (String modGene : dpiAnnotList) {
			DSGeneMarker marker = mSet.getMarkers().get(modGene);
			if (marker == null) {
				log.info("Couldn't find marker " + modGene
						+ " from DPI annotation file in microarray set.");
				JOptionPane
						.showMessageDialog(
								null,
								modGene
										+ " DPI annotated gene not found in loadad microarray set.");
				return null;
			} else {
				paramDesc += modGene + " ";
				dpiAnnots.add(new Marker(modGene));
			}
		}
		paramDesc += "\n";

		Mindy mindy = new Mindy();
		String transcriptionFactor = params.getTranscriptionFactor();
		DSGeneMarker transFac = mSet.getMarkers().get(transcriptionFactor);
		if (transFac == null) {
			JOptionPane.showMessageDialog(null, "Specified hub gene ("
					+ transcriptionFactor
					+ ") not found in loadad microarray set.");
			return null;
		}
		paramDesc += "Transcription Factor: " + transcriptionFactor + "\n";

		boolean fullSetMI = true;
		float fullSetThreshold = 0f;
		if (params.getFullSetMIThreshold() > 0) {
			fullSetThreshold = params.getFullSetMIThreshold();
			paramDesc += "Full Set MI Threshold: " + fullSetThreshold + "\n";
		} else {
			fullSetMI = false;
			fullSetThreshold = params.getFullsetPValueThreshold();
			paramDesc += "Full Set P-Value Threshold: " + fullSetThreshold
					+ "\n";
		}

		boolean subsetMI = true;
		float subsetThreshold = 0f;
		if (params.getSubsetMIThreshold() > 0) {
			subsetThreshold = params.getSubsetMIThreshold();
			paramDesc += "Conditional MI Threshold: " + subsetThreshold + "\n";
		} else {
			subsetMI = false;
			subsetThreshold = params.getSubsetPValueThreshold();
			paramDesc += "Conditional P-Value Threshold: " + subsetThreshold
					+ "\n";
		}

		log.info("Running MINDY analysis.");
		float setFraction = params.getSetFraction() / 100f;
		paramDesc += "Set Fraction: " + setFraction + "\n";
		MindyResults results = null;
		try {
			results = mindy.runMindy(convert(mSet), new Marker(params
					.getTranscriptionFactor()), modulators, dpiAnnots,
					fullSetMI, fullSetThreshold, subsetMI, subsetThreshold,
					setFraction, params.getDPITolerance());
		} catch (Exception e) {
			System.out.println(e.getMessage() + "\n" + e.toString());
			JOptionPane.showMessageDialog(paramPanel.getParent(),
					"something strange happened...");
			return null;
		}
		log.info("MINDY analysis complete.");
		List<MindyData.MindyResultRow> dataRows = new ArrayList<MindyData.MindyResultRow>();
		for (MindyResults.MindyResultForTarget result : results) {
			DSItemList<DSGeneMarker> markers = mSet.getMarkers();
			DSGeneMarker target = markers.get(result.getTarget().getName());
			for (MindyResults.MindyResultForTarget.ModulatorSpecificResult specificResult : result) {
				DSGeneMarker mod = markers.get(specificResult.getModulator()
						.getName());
				dataRows.add(new MindyData.MindyResultRow(mod, transFac,
						target, specificResult.getScore(), 0f));
			}
		}

		MindyData loadedData = new MindyData((CSMicroarraySet) mSet, dataRows);
		log.info("Done converting MINDY results.");

		MindyDataSet dataSet = new MindyDataSet(mSet, "MINDY Results",
				loadedData, params.getCandidateModulatorsFile());
		ProjectPanel.addToHistory(dataSet, paramDesc);
		return new AlgorithmExecutionResults(true, "MINDY Results Loaded.",
				dataSet);

	}

	/**
	 * 
	 * @param inSet
	 * @return
	 */
	private MicroarraySet convert(DSMicroarraySet<DSMicroarray> inSet) {
		MarkerSet markers = new MarkerSet();
		for (DSGeneMarker marker : inSet.getMarkers()) {
			markers.addMarker(new Marker(marker.getLabel()));
		}
		MicroarraySet returnSet = new MicroarraySet(inSet.getDataSetName(),
				"ID", "ChipType", markers);
		for (DSMicroarray microarray : inSet) {
			returnSet.addMicroarray(new Microarray(microarray.getLabel(),
					microarray.getRawMarkerData()));
		}
		return returnSet;
	}

	/**
	 * 
	 * @param inSet
	 * @return
	 */
	private DSMicroarraySet<DSMicroarray> convert(MicroarraySet inSet) {
		DSMicroarraySet<DSMicroarray> microarraySet = new CSMicroarraySet<DSMicroarray>();
		microarraySet.setLabel(inSet.getName());

		for (int i = 0; i < inSet.getMarkers().size(); i++) {
			/* cagrid array */
			Microarray inArray = inSet.getMicroarray(i);
			float[] arrayData = inArray.getValues();
			String arrayName = inArray.getName();

			/* bison array */
			CSMicroarray microarray = new CSMicroarray(arrayData.length);
			microarray.setLabel(arrayName);
			for (int j = 0; j < arrayData.length; j++) {
				DSMarkerValue markerValue = new CSExpressionMarkerValue(
						arrayData[j]);
				microarray.setMarkerValue(j, markerValue);
			}
			microarraySet.add(i, microarray);

			// Create marker
			microarraySet.getMarkers()
					.add(
							new CSGeneMarker(inSet.getMarkers().getMarker(i)
									.getName()));
		}

		return microarraySet;
	}

	/**
	 * 
	 * @param e
	 * @param source
	 */
	@Subscribe
	public void receive(GeneSelectorEvent e, Object source) {
		DSGeneMarker marker = e.getGenericMarker(); // GeneselectorEvent can be
		// a panel event therefore
		// won't work here,
		if (marker != null) { // so added this check point--xuegong
			paramPanel.setTranscriptionFactor(marker.getLabel());
		}
	}

	/**
	 * 
	 * @param data
	 * @return
	 */
	@Publish
	public MindyDataSet publishMatrixReduceSet(MindyDataSet data) {
		return data;
	}
}
