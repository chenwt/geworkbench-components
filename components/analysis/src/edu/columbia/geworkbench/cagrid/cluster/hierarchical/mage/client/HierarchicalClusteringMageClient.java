package edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.client;

import edu.columbia.geworkbench.cagrid.MageBioAssayGenerator;
import edu.columbia.geworkbench.cagrid.MageBioAssayGeneratorImpl;
import edu.columbia.geworkbench.cagrid.cluster.hierarchical.Dim;
import edu.columbia.geworkbench.cagrid.cluster.hierarchical.Distance;
import edu.columbia.geworkbench.cagrid.cluster.hierarchical.HierarchicalClusteringParameter;
import edu.columbia.geworkbench.cagrid.cluster.hierarchical.Method;
import edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.common.HierarchicalClusteringMageI;
import edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.HierarchicalClusteringMagePortType;
import edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.service.HierarchicalClusteringMageServiceAddressingLocator;
import gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient;
import gov.nih.nci.mageom.domain.bioassay.BioAssay;

import java.io.FileInputStream;
import java.io.InputStream;
import java.rmi.RemoteException;

import org.apache.axis.EngineConfiguration;
import org.apache.axis.client.AxisClient;
import org.apache.axis.client.Stub;
import org.apache.axis.configuration.FileProvider;
import org.apache.axis.message.addressing.EndpointReferenceType;
import org.apache.axis.types.URI.MalformedURIException;
import org.apache.axis.utils.ClassUtils;
import org.ginkgo.labs.reader.TabFileReader;
import org.globus.gsi.GlobusCredential;

/**
 * This class is autogenerated, DO NOT EDIT.
 * 
 * This class is not thread safe. A new instance should be created for any
 * threads using this class. On construction the class instance will contact the
 * remote service and retrieve it's security metadata description which it will
 * use to configure the Stub specifically for each method call.
 * 
 * @created by Introduce Toolkit version 1.0
 * @author keshav
 * @version $Id: HierarchicalClusteringMageClient.java,v 1.1 2007/02/22 18:43:52
 *          keshav Exp $
 */
public class HierarchicalClusteringMageClient extends ServiceSecurityClient
		implements HierarchicalClusteringMageI {
	protected HierarchicalClusteringMagePortType portType;
	private Object portTypeMutex;

	/**
	 * 
	 * @param url
	 * @throws MalformedURIException
	 * @throws RemoteException
	 */
	public HierarchicalClusteringMageClient(String url)
			throws MalformedURIException, RemoteException {
		this(url, null);
	}

	/**
	 * 
	 * @param url
	 * @param proxy
	 * @throws MalformedURIException
	 * @throws RemoteException
	 */
	public HierarchicalClusteringMageClient(String url, GlobusCredential proxy)
			throws MalformedURIException, RemoteException {
		super(url, proxy);
		initialize();
	}

	/**
	 * 
	 * @param epr
	 * @throws MalformedURIException
	 * @throws RemoteException
	 */
	public HierarchicalClusteringMageClient(EndpointReferenceType epr)
			throws MalformedURIException, RemoteException {
		this(epr, null);
	}

	/**
	 * 
	 * @param epr
	 * @param proxy
	 * @throws MalformedURIException
	 * @throws RemoteException
	 */
	public HierarchicalClusteringMageClient(EndpointReferenceType epr,
			GlobusCredential proxy) throws MalformedURIException,
			RemoteException {
		super(epr, proxy);
		initialize();
	}

	/**
	 * 
	 * @throws RemoteException
	 */
	private void initialize() throws RemoteException {
		this.portTypeMutex = new Object();
		this.portType = createPortType();
	}

	/**
	 * 
	 * @return
	 * @throws RemoteException
	 */
	private HierarchicalClusteringMagePortType createPortType()
			throws RemoteException {

		HierarchicalClusteringMageServiceAddressingLocator locator = new HierarchicalClusteringMageServiceAddressingLocator();
		// attempt to load our context sensitive wsdd file
		InputStream resourceAsStream = ClassUtils.getResourceAsStream(
				getClass(), "client-config.wsdd");
		if (resourceAsStream != null) {
			// we found it, so tell axis to configure an engine to use it
			EngineConfiguration engineConfig = new FileProvider(
					resourceAsStream);
			// set the engine of the locator
			locator.setEngine(new AxisClient(engineConfig));
		}
		HierarchicalClusteringMagePortType port = null;
		try {
			port = locator
					.getHierarchicalClusteringMagePortTypePort(getEndpointReference());
		} catch (Exception e) {
			throw new RemoteException("Unable to locate portType:"
					+ e.getMessage(), e);
		}

		return port;
	}

	public static void usage() {
		System.out.println(HierarchicalClusteringMageClient.class.getName()
				+ " -url <service url>");
	}

	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("Running the Grid Service Client");
		try {
			if (!(args.length < 2)) {
				if (args[0].equals("-url")) {
					HierarchicalClusteringMageClient client = new HierarchicalClusteringMageClient(
							args[1]);

					String filename = "test/edu/columbia/geworkbench/cagrid/converter/aTestDataSet_without_headers_2x2.txt";
					InputStream is = null;
					is = new FileInputStream(filename);
					float[][] fdata = TabFileReader.readTabFile(is);

					MageBioAssayGenerator mageBioAssayGenerator = new MageBioAssayGeneratorImpl();

					String[] rowNames = new String[fdata.length];
					for (int i = 0; i < rowNames.length; i++) {
						rowNames[i] = String.valueOf(i);
					}

					String[] colNames = new String[fdata[0].length];
					for (int i = 0; i < colNames.length; i++) {
						rowNames[i] = String.valueOf(i);
					}
					BioAssay[] bioAssays = mageBioAssayGenerator
							.float2DToBioAssayArray(fdata, rowNames, colNames);

					HierarchicalClusteringParameter parameters = new HierarchicalClusteringParameter();
					parameters.setDim(Dim.both);
					parameters.setDistance(Distance.euclidean);
					parameters.setMethod(Method.average);
					client.execute(bioAssays, parameters);

				} else {
					usage();
					System.exit(1);
				}
			} else {
				usage();
				System.exit(1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.exit(1);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see gov.nih.nci.cagrid.introduce.security.client.ServiceSecurityClient#getServiceSecurityMetadata()
	 */
	public gov.nih.nci.cagrid.metadata.security.ServiceSecurityMetadata getServiceSecurityMetadata()
			throws RemoteException {
		synchronized (portTypeMutex) {
			configureStubSecurity((Stub) portType, "getServiceSecurityMetadata");
			gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest params = new gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataRequest();
			gov.nih.nci.cagrid.introduce.security.stubs.GetServiceSecurityMetadataResponse boxedResult = portType
					.getServiceSecurityMetadata(params);
			return boxedResult.getServiceSecurityMetadata();
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.common.HierarchicalClusteringMageI#execute(gov.nih.nci.mageom.domain.bioassay.BioAssay[],
	 *      edu.columbia.geworkbench.cagrid.cluster.hierarchical.HierarchicalClusteringParameter)
	 */
	public edu.columbia.geworkbench.cagrid.cluster.hierarchical.HierarchicalCluster execute(
			gov.nih.nci.mageom.domain.bioassay.BioAssay[] bioAssay,
			edu.columbia.geworkbench.cagrid.cluster.hierarchical.HierarchicalClusteringParameter hierarchicalClusteringParameter)
			throws RemoteException {
		synchronized (portTypeMutex) {
			configureStubSecurity((Stub) portType, "execute");
			edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.ExecuteRequest params = new edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.ExecuteRequest();
			edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.ExecuteRequestBioAssay bioAssayContainer = new edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.ExecuteRequestBioAssay();
			bioAssayContainer.setBioAssay(bioAssay);
			params.setBioAssay(bioAssayContainer);
			edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.ExecuteRequestHierarchicalClusteringParameter hierarchicalClusteringParameterContainer = new edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.ExecuteRequestHierarchicalClusteringParameter();
			hierarchicalClusteringParameterContainer
					.setHierarchicalClusteringParameter(hierarchicalClusteringParameter);
			params
					.setHierarchicalClusteringParameter(hierarchicalClusteringParameterContainer);
			edu.columbia.geworkbench.cagrid.cluster.hierarchical.mage.stubs.ExecuteResponse boxedResult = portType
					.execute(params);
			return boxedResult.getHierarchicalCluster();
		}
	}

}
