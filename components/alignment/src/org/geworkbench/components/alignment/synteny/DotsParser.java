package org.geworkbench.components.alignment.synteny;

import java.io.*;

/**
 * DotsParser is a class that reads in from a file generated by
 * RemoteDots of Dots results.  It reads out the Dots data into a
 * SyntenyObj object.
 */
public class DotsParser {

    /**
     * DotMatrixObject
     */
    public static DotMatrixObj dm;

    /**
     * The file name to write results out to.
     */
    private String filename;

    /**
     * DotsParser
     *
     * @param aString String
     */
    public DotsParser(String aString, DotMatrixObj dmo) {
        parseResults(aString, dmo);
    }

    /**
     * Reads in Dots results from file and parses data into DotMatrixObj objects.
     */
    public void parseResults(String filename, DotMatrixObj dm) {

        String infile1, infile2;
        int i, st1, st2, en1, en2, xsize, ysize;

//        dm = new DotMatrixObj();
        System.out.println("reading " + filename);

        try {
            File file = new File(filename);
            //server failure
            if (file.length() < 1500) {
                System.out.println("Wrong result file size. try again.");
            }
            else {
                //new BufferedReader for parsing file line by line
                BufferedReader br =
                    new BufferedReader(new FileReader(filename));
                String line;

                /* Walk to the begining of annotation */
                while (true) {
                    if ( (line = br.readLine()) == null) {
                        break;
                    }
                    if (line.indexOf("/# Start of DOTS output #/") != -1) {
                        break;
                    }
                }

                //loop to proceed the header
                while (true) {
                    line = br.readLine();

                    if (line.indexOf("/# End of DOTS output #/") != -1) {
                        break;
                    }

                    if (line.startsWith("sequence1: ")) {
                        dm.setDescriptionX(line.substring(10));
                    }
                    if (line.startsWith("start1: ")) {
                        dm.setStartX(Integer.parseInt(line.substring(8)));
                    }
                    if (line.startsWith("end1: ")) {
                        dm.setEndX(Integer.parseInt(line.substring(6)));
                    }
                    if (line.startsWith("sequence2: ")) {
                        dm.setDescriptionY(line.substring(10));
                    }
                    if (line.startsWith("start2: ")) {
                        dm.setStartY(Integer.parseInt(line.substring(8)));
                    }
                    if (line.startsWith("end2: ")) {
                        dm.setEndY(Integer.parseInt(line.substring(6)));
                    }
                    if (line.startsWith("X_dimention: ")) {
                        dm.setPixX(Integer.parseInt(line.substring(13)));
                    }
                    if (line.startsWith("Y_dimention: ")) {
                        dm.setPixY(Integer.parseInt(line.substring(13)));
                    }
                    if (line.startsWith("DIRECT:")) {
                        break;
                    }

                }
                /* reading the actual dotmatrix for direct chain */
                line = br.readLine();
                dm.setDotMatrixDirect(line.toCharArray());

                line = br.readLine();
                if (line.startsWith("COMPLEMENTARY:")) {
                    line = br.readLine();
                    dm.setDotMatrixInvert(line.toCharArray());
                }
            }
        }
        catch (FileNotFoundException e) {
            System.out.println("Input file not found.");
//            System.exit(1);
        }
        catch (IOException e) {
            System.out.println("IOException!");
        }
    }
}
