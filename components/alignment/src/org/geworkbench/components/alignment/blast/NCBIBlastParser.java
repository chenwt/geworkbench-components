package org.geworkbench.components.alignment.blast;

/**
 * <p>Title: </p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2005</p>
 *
 * <p>Company: </p>
 *
 * @author not attributable
 * @version 1.0
 */
import java.io.*;
import java.util.*;
import java.util.regex.*;
import org.geworkbench.components.alignment.blast.BlastObj;
import org.geworkbench.components.alignment.blast.ProtSeq;
import org.geworkbench.bison.datastructure.biocollections.sequences.CSSequenceSet;

/**
 * BlastParser is a class that reads in from a text file generated by
 * RemoteBlast of Blast results.  It parses out the Blast hits into a
 * Vector of BlastObj objects.
 *
 */
public class NCBIBlastParser {

        /**
         * The sequence data used as query seqeunce.
         */
        private CSSequenceSet sequenceDB;
        /**
         * A Vector of Strings representing each Blast hit by Accession number.
         */
        private Vector hits;
        /**
         * The file name to write results out to.
         */
        private String filename;
        /**
         * The default file name to write results out to.
         */
        private final String DEFAULT_FILENAME = "BLAST_results.txt";
        /**
         * An array of type char.
         */
        private final char[] EMPTY = new char[60];

        /**
         * Creates a new BlastParser with querySeq set to specified ProtSeq.
         * Also creates a new hits Vector and sets filename to default value.
         *
         * @param 		the ProtSeq to set querySeq to.
         */
        public NCBIBlastParser(ProtSeq seq) {
                this.sequenceDB = null;
                hits = new Vector();
                this.filename = DEFAULT_FILENAME;
        }
        /**
         * Creates a new BlastParser with querySeq and filename set to specified
         * ProtSeq and String value.  Also creates a new hits Vector.
         *
         * @param 		the ProtSeq to set querySeq to.
         * @param 		the String to set filename to.
         */
        public NCBIBlastParser(CSSequenceSet sequenceDB, String filename) {
                this.sequenceDB = sequenceDB;
                hits = new Vector();
                this.filename = filename;
        }

        /**
         * Creates a new BlastParser with filename set to default value.  Also
         * creates a new hits Vector.
         */
        public NCBIBlastParser() {
                this.filename = DEFAULT_FILENAME;
                hits = new Vector();
        }

        /**
         * Returns the hits Vector.
         */
        public Vector getHits() {
                return hits;
        }

        /**
         * Reads in Blast results from file and parses data into BlastObj objects.
         */
        public void parseResults() {
                StringTokenizer st;
                BlastObj each;
                String[] fields;
                int index, index1 = 0, index2 = 0, start = 0;
                String query = "", subject = "", align = "";

                System.out.println("reading " + filename);
                try {
                        File file = new File(filename);
                        //server failure
                        if (file.length() < 1500) {
                                System.out.println("Blast failed. try again.");
                        } else {
                                System.out.println("test1");
                                //new BufferedReader for parsing file line by line
                                BufferedReader br =
                                        new BufferedReader(new FileReader(filename));
                                String line;
                                String sub;
                                //loop to proceed to beginning of hit list from Blast output file
                                while (true) {
                                        System.out.println("test2");
                                        line = br.readLine();
                                        if (line
                                                .startsWith("Sequences producing significant alignments:")) {
                                                break;
                                        }
                                }

                                /* parsing section of the blast Hit info text*/
                                br.readLine();
                                line = br.readLine();
                                while (line.trim().compareTo("") != 0) {
                                        System.out.println("test3");
                                        //StringTokenizer for each hit
                                        st = new StringTokenizer(line, "|");
                                        each = new BlastObj();  //create new BlastObj for hit
                                        each.setDatabaseID(st.nextToken()); //set Database name
                                        //check to see if there's a "||" (empty field)
                                        if (line.indexOf("||") > -1) {
                                                String name = st.nextToken(" ");
                                                name = name.replace('|', ' ');
                                                each.setName(name.trim());
                                        } else {
                                                each.setName(st.nextToken());
                                        }
                                        sub = st.nextToken("\n");
                                        //split remaning line String by "  "
                                        fields = sub.split("  ");
                                        each.setDescription(fields[0].trim());
                                        index = 1;
                                        //loop to get the score; checking if the String is an integer
                                        while (each.getScore() != -1) {
                                                System.out.println("test4");
                                                while (fields[index].trim().compareTo("") == 0)
                                                        index++;
                                                String score = fields[index].trim();

                                                try {
                                                        each.setScore(Integer.valueOf(score).intValue());
                                                } catch (Exception e) {
                                                        index++;
                                                }
                                        }
                                        //set e-value
                                        each.setEvalue(fields[index + 1].trim());
                                        hits.add(each); //add hit to Vector of hits
                                        line = br.readLine();
                                }
                                index = 0;
                                line = br.readLine();
                                /* parsing the section with alignments */
                                while (!(line.trim().startsWith("Score    E")
                                        || line.trim().startsWith("Database:"))) {
                                    System.out.println("test5");
                                    //get BlastObj hit for which alignment is for
                                        each = (BlastObj) hits.get(index);
                                        System.out.println(each.getName());
                                        //skip the beginning description
                                        while (!(line.trim().startsWith("Identities"))) {
                                                line = br.readLine();
                                        }
                                        //separate fields by '(' and '%'
                                        st = new StringTokenizer(line, "(%");
                                        st.nextToken();
                                        //set percent of query aligned
                                        each.setPercentAligned(
                                                Integer.valueOf(st.nextToken()).intValue());
                                        st.nextToken();
                                        //set percent of query that's "positive" to the hit
                                        each.setPercentPos(
                                                Integer.valueOf(st.nextToken()).intValue());
                                        st.nextToken();
                                        if (st.hasMoreTokens()) {
                                            //set percent of query that's gapped to the hit
                                                each.setPercentGapped(
                                                        Integer.valueOf(st.nextToken()).intValue());
                                        }
                                        line = br.readLine();
                                        //parsing actual alignment
                                        while (!(line.startsWith(">")
                                                || line.trim().startsWith("Score    E")
                                                || line.trim().startsWith("Database:"))) {
                                            System.out.println("test6");
                                                if (line.trim().compareTo("") != 0) {
                                                    //line is part of query sequence
                                                        if (line.startsWith("Query")) {
                                                                st = new StringTokenizer(line);
                                                                st.nextToken();
                                                                index1 =
                                                                        Integer.valueOf(st.nextToken()).intValue();
                                                                sub = st.nextToken();
                                                                query = query.concat(sub);
                                                                start = line.indexOf(sub);
                                                                index2 =
                                                                        Integer.valueOf(st.nextToken()).intValue();
                                                                //System.out.println(index1 + " " + index2);
                                                        } else {
                                                            //line is part of hit sequence
                                                                if (line.startsWith("Sbjct")) {
                                                                        st = new StringTokenizer(line);
                                                                        st.nextToken();
                                                                        st.nextToken();
                                                                        subject = subject.concat(st.nextToken());
                                                                } else {
                                                                    //line is part of aligned sequence
                                                                        sub = line.substring(start);
                                                                        align = align.concat(sub);
                                                                        if (sub.length() < (index2 - index1 + 1)) {
                                                                                align =
                                                                                        align.concat(
                                                                                                new String(
                                                                                                        EMPTY,
                                                                                                        0,
                                                                                                        index2
                                                                                                                - index1
                                                                                                                + 1
                                                                                                                - sub.length()));
                                                                        }
                                                                }
                                                        }
                                                }
                                                line = br.readLine();
                                        }
                                        each.setLength(align.length()); // set length of alignment
                                        each.setQuery(query);  // set query sequence String
                                        each.setSubject(subject); //set subject sequence String
                                        each.setAlign(align); //set alignment sequence String
                                        hits.set(index, each); //set hit back into Vector of hits
                                        index++;  //increase index to next hit
                                        //reset all Strings for next alignment
                                        query = "";
                                        subject = "";
                                        align = "";
                                }
                        }
                } catch (FileNotFoundException e) {
                        System.out.println("file not found.");
                        System.exit(1);
                } catch (IOException e) {
                        System.out.println("IOException!");
                }
        }

        /*public static void main(String[] args) {
                BlastParser test = new BlastParser();
                test.parseResults();
        }*/

}
