package org.geworkbench.components.alignment.blast;

/**
 *
 * @author not attributable
 * @version $Id$
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;

import org.geworkbench.bison.datastructure.biocollections.sequences.CSSequenceSet;
import org.geworkbench.bison.datastructure.bioobjects.sequence.DSSequence;

/**
 * BlastParser is a class that reads in from a text file generated by
 * RemoteBlast of Blast results.  It parses out the Blast hits into a
 * Vector of BlastObj objects.
 */
public class NCBIBlastParser {

    /**
     * A Vector of Strings representing each Blast hit by Accession number.
     */
    private Vector<BlastObj> hits;
    /**
     * The file name to write results out to.
     */
    private String filename;

    /**
     * Creates a new BlastParser with querySeq and filename set to specified
     * ProtSeq and String value.  Also creates a new hits Vector.
     *
     * @param the ProtSeq to set querySeq to.
     * @param the String to set filename to.
     */
    public NCBIBlastParser(CSSequenceSet<? extends DSSequence> sequenceDB, String filename) {
        totalSequenceNum = sequenceDB.size();
        hits = new Vector<BlastObj>();
        this.filename = filename;
    }

    /**
     * The primary protein sequence, if used as query sequence.
     */
    private static String NEWLINESIGN = "<BR>";
    private static int MAXNUMBERHITS = 250;
    private int hitCount = 0;
    private int totalHitCount = 0;
    private int totalSequenceNum = 0;
    private boolean hit250More = false;

    /**
     * The new BlastDataSet Array
     */
    private ArrayList<Vector<BlastObj>> blastDataset = new ArrayList<Vector<BlastObj>>(10);
    private int count = 0;

    /**
     * Returns the hits Vector.
     */
    public Vector<BlastObj> getHits() {
        return hits;
    }

    public ArrayList<Vector<BlastObj>> getBlastDataset() {
        return blastDataset;
    }

    /**
     * Reads in Blast results from file and parses data into BlastObj objects.
     */
    public boolean parseResults() {
        totalHitCount = 0;
        StringTokenizer st;
        BlastObj each;
        int index = 0;
        String subject = "";
        String errorline = "";

        try {
            File file = new File(filename);
            //server failure
            if (file.length() < 600) {
                System.out.println("No hit found. try again.");
                return false;
            } else {

                //new BufferedReader for parsing file line by line
                BufferedReader br = new BufferedReader(new FileReader(
                        filename));
                String line;
                line = br.readLine();
                do {
                    hits = new Vector<BlastObj>();
                    boolean noHitsFound = false;
                    //loop to proceed to beginning of hit list from Blast output file
                    while (true) {
                        line = br.readLine();

                        if (line == null ||
                                (line.startsWith(
                                        "Sequences producing significant alignments:"))) {
                            break;
                        }
                        if (line == null ||
                                (line.contains("No significant similarity found."))) {
                            noHitsFound = true;
                            break;
                        }
                    }
                    if (!noHitsFound) {

                        /* parsing section of the blast Hit info text*/
                        br.readLine();
                        line = br.readLine();
                        hitCount = 0;
                        while (line != null &&
                                !line.trim().startsWith("</pre>")) {
                            // System.out.println("test3: " + line);
                            String[] strA = line.split("</a>");

                            for (int i = 0; i < strA.length; i++) {
                                //System.out.println(strA[i]);
                            }
                            hitCount++;
                            totalHitCount++;
                            if (hitCount <= MAXNUMBERHITS) {

                                each = new BlastObj(); //create new BlastObj for hit
                                if (strA.length < 3) {
                                    each.setRetriveWholeSeq(false);
                                } else {
                                    each.setRetriveWholeSeq(true);
                                    StringTokenizer st1 = new StringTokenizer(
                                            strA[
                                                    0], "\"");
                                    st1.nextToken();
                                    if (st1.hasMoreTokens()) {
                                        String s = st1.nextToken();
                                        each.setInfoURL(new URL(s));
                                        s = s.replaceAll("GenPept", "fasta");
                                        s = s.replaceAll("GenBank", "fasta");
                                        each.setSeqURL(new URL(s));

                                    }
                                    if (st1.hasMoreTokens()) {
                                        StringTokenizer st2 = new
                                                StringTokenizer(
                                                st1.nextToken(), "|");
                                        if (st2.hasMoreTokens()) {
                                            each.setDatabaseID(st2.nextToken().
                                                    substring(2));
                                        }
                                        if (st2.hasMoreTokens()) {
                                            each.setName(st2.nextToken());
                                        }
                                        if (st2.hasMoreTokens()) {
                                            each.setDescription(st2.nextToken());
                                        }
                                    }
                                    StringTokenizer st3 = new StringTokenizer(
                                            strA[
                                                    1], "<");
                                    if (st3.hasMoreTokens()) {
                                        each.setDescription(st3.nextToken());
                                    }
                                    if (st3.hasMoreTokens()) {
                                        StringTokenizer st4 = new
                                                StringTokenizer(
                                                st3.nextToken(), ">");

                                        String str = "0";
                                        while (st4.hasMoreTokens()) {
                                            str = st4.nextToken();
                                        }
                                        each.setScore(new Float(str.trim()).
                                                intValue()
                                        );
                                    }
                                    if (strA[2] != null) {
                                        String[] s = strA[2].split("<");
                                        each.setEvalue(s[0]);
                                    }

                                    hits.add(each);
                                }
                                //System.out.println(each.getDatabaseID() + each.getDescription()
                                //                   + each.getEvalue() + each.getScore());
                            } else {
                                hit250More = true;
                            }
                            //end of check hitCount;
                            line = br.readLine();

                        } //end of processing summary.
                        //System.out.println(line+ " " + hits.size());
                        index = 0;

                        boolean endofResult = false;
                        while (line != null && !line.trim().startsWith("Database") &&
                                !line.trim().startsWith(">")) {
                            line = br.readLine();
                        }

                        /* parsing detailed alignments Each has <PRE></PRE> */
                        while (line != null && line.trim().startsWith(">") || line.trim().startsWith("Database")) {
                            //System.out.println("test5" + line);
                            if (line.trim().startsWith("Database")) {
                                endofResult = true;
                                break;
                            }

                            String detaillines = "<PRE>" + line;
                            line = br.readLine().trim();

                            boolean additionalDetail = false;
                            if (line.trim().startsWith("Score")) {
                                index--;
                                additionalDetail = true;

                            }
                            //get BlastObj hit for which alignment is for
                            each = hits.get(index);
                            //skip the beginning description
                            subject = "";
                            boolean getStartPoint = true;
                            subject = "";
                            int endPoint = 0;
                            while (!(line.trim().startsWith(">"))) {

                                if (line.startsWith("</form>")) {
                                    //end of the useful information for one blast.
                                    endofResult = true;
                                    break;
                                }

                                if (line.startsWith("Length=")) {
                                    String[] lengthVal = line.split("=");
                                    each.setLength(new Integer(lengthVal[1].trim()).intValue());
                                }
                                if (line.startsWith("Identities = ")) {
                                    /* TODO
                                     * use Match pattern later.
                                     */
                                    StringTokenizer st1 = new StringTokenizer(
                                            line,
                                            "(");
                                    st1.nextToken();
                                    String identity = st1.nextToken();
                                    String[] s = identity.split("%");
                                    each.setPercentAligned(new Integer(s[0]).
                                            intValue());

                                }
                                // get the start point, end point and length

                                if (line.trim().startsWith("Sbjct")) {
                                    st = new StringTokenizer(line);
                                    st.nextToken();
                                    if (getStartPoint) {
                                        each.setStartPoint(Integer.valueOf(st.
                                                nextToken()).intValue());
                                        getStartPoint = false;
                                    } else {
                                        st.nextToken();
                                    }
                                    //concat the aligned parts and get rid of "-"
                                    subject = subject.concat(st.nextToken().
                                            replaceAll("-", ""));

                                    endPoint = Integer.valueOf(st.nextToken()).
                                            intValue();
                                }

                                //System.out.println(each.getStartPoint() + "" + each.getEndPoint());
                                String s = br.readLine();
                                line = s.trim();
                                if (!line.startsWith(">")) {
                                    detaillines += s + NEWLINESIGN;
                                }
                            }
                            each.setEndPoint(endPoint);
                            each.setAlignmentLength(Math.abs(each.getStartPoint() -
                                    each.getEndPoint()) + 1);
                            each.setSubject(subject);
                            //System.out.println("sub" + subject);

                            detaillines += "</PRE>";

                            //System.out.println(detaillines);
                            if (additionalDetail) {
                                String previousDetail = each.
                                        getDetailedAlignment();
                                detaillines = previousDetail + detaillines;
                            }
                            each.setDetailedAlignment(detaillines);

                            index++;
                            if (endofResult) {
                                endofResult = false;
                                break;
                            }

                        }
                        line = br.readLine();
                        Vector<BlastObj> newHits = hits;
                        blastDataset.add(newHits);
                        count++;
                    } else {
                        blastDataset.add(null);
                        count++;
                    }
                } while (count < totalSequenceNum);
                return true;
            }

        } catch (FileNotFoundException e) {
            System.out.println("file not found.");
            return false;
            //System.exit(1);
        } catch (IOException e) {
            System.out.println("NCBIBLASTParser + IOException!");
            e.printStackTrace();
            return false;
        } catch (Exception e) {

            System.out.println("NCBIBLASTParser " + errorline);
            e.printStackTrace();

            //find a blast bug, temp change to true.
            return false;

        }

    }

    /**
     * getSummary
     *
     * @return String
     */
    public String getSummary() {
        if (hit250More) {
            return "Some sequences have more than 250 hits, only the first 250 hits are displayed. Total hits are " +
                    totalHitCount +
                    ".";
        }
        return "Total hits for all sequences are " + totalHitCount + ".";
    }

}
